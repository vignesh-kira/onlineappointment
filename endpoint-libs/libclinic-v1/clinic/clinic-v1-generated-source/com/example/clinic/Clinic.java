/*
 * Licensed under the Apache License, Version 2.0 (the "License"); you may not use this file except
 * in compliance with the License. You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software distributed under the License
 * is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express
 * or implied. See the License for the specific language governing permissions and limitations under
 * the License.
 */
/*
 * This code was generated by https://code.google.com/p/google-apis-client-generator/
 * (build: 2015-01-14 17:53:03 UTC)
 * on 2015-02-26 at 03:33:04 UTC 
 * Modify at your own risk.
 */

package com.example.clinic;

/**
 * Service definition for Clinic (v1).
 *
 * <p>
 * This is an API
 * </p>
 *
 * <p>
 * For more information about this service, see the
 * <a href="" target="_blank">API Documentation</a>
 * </p>
 *
 * <p>
 * This service uses {@link ClinicRequestInitializer} to initialize global parameters via its
 * {@link Builder}.
 * </p>
 *
 * @since 1.3
 * @author Google, Inc.
 */
@SuppressWarnings("javadoc")
public class Clinic extends com.google.api.client.googleapis.services.json.AbstractGoogleJsonClient {

  // Note: Leave this static initializer at the top of the file.
  static {
    com.google.api.client.util.Preconditions.checkState(
        com.google.api.client.googleapis.GoogleUtils.MAJOR_VERSION == 1 &&
        com.google.api.client.googleapis.GoogleUtils.MINOR_VERSION >= 15,
        "You are currently running with version %s of google-api-client. " +
        "You need at least version 1.15 of google-api-client to run version " +
        "1.18.0-rc of the clinic library.", com.google.api.client.googleapis.GoogleUtils.VERSION);
  }

  /**
   * The default encoded root URL of the service. This is determined when the library is generated
   * and normally should not be changed.
   *
   * @since 1.7
   */
  public static final String DEFAULT_ROOT_URL = "https://myapp.appspot.com/_ah/api/";

  /**
   * The default encoded service path of the service. This is determined when the library is
   * generated and normally should not be changed.
   *
   * @since 1.7
   */
  public static final String DEFAULT_SERVICE_PATH = "clinic/v1/";

  /**
   * The default encoded base URL of the service. This is determined when the library is generated
   * and normally should not be changed.
   */
  public static final String DEFAULT_BASE_URL = DEFAULT_ROOT_URL + DEFAULT_SERVICE_PATH;

  /**
   * Constructor.
   *
   * <p>
   * Use {@link Builder} if you need to specify any of the optional parameters.
   * </p>
   *
   * @param transport HTTP transport, which should normally be:
   *        <ul>
   *        <li>Google App Engine:
   *        {@code com.google.api.client.extensions.appengine.http.UrlFetchTransport}</li>
   *        <li>Android: {@code newCompatibleTransport} from
   *        {@code com.google.api.client.extensions.android.http.AndroidHttp}</li>
   *        <li>Java: {@link com.google.api.client.googleapis.javanet.GoogleNetHttpTransport#newTrustedTransport()}
   *        </li>
   *        </ul>
   * @param jsonFactory JSON factory, which may be:
   *        <ul>
   *        <li>Jackson: {@code com.google.api.client.json.jackson2.JacksonFactory}</li>
   *        <li>Google GSON: {@code com.google.api.client.json.gson.GsonFactory}</li>
   *        <li>Android Honeycomb or higher:
   *        {@code com.google.api.client.extensions.android.json.AndroidJsonFactory}</li>
   *        </ul>
   * @param httpRequestInitializer HTTP request initializer or {@code null} for none
   * @since 1.7
   */
  public Clinic(com.google.api.client.http.HttpTransport transport, com.google.api.client.json.JsonFactory jsonFactory,
      com.google.api.client.http.HttpRequestInitializer httpRequestInitializer) {
    this(new Builder(transport, jsonFactory, httpRequestInitializer));
  }

  /**
   * @param builder builder
   */
  Clinic(Builder builder) {
    super(builder);
  }

  @Override
  protected void initialize(com.google.api.client.googleapis.services.AbstractGoogleClientRequest<?> httpClientRequest) throws java.io.IOException {
    super.initialize(httpClientRequest);
  }

  /**
   * An accessor for creating requests from the Doctors collection.
   *
   * <p>The typical use is:</p>
   * <pre>
   *   {@code Clinic clinic = new Clinic(...);}
   *   {@code Clinic.Doctors.List request = clinic.doctors().list(parameters ...)}
   * </pre>
   *
   * @return the resource collection
   */
  public Doctors doctors() {
    return new Doctors();
  }

  /**
   * The "doctors" collection of methods.
   */
  public class Doctors {

    /**
     * An accessor for creating requests from the Appointments collection.
     *
     * <p>The typical use is:</p>
     * <pre>
     *   {@code Clinic clinic = new Clinic(...);}
     *   {@code Clinic.Appointments.List request = clinic.appointments().list(parameters ...)}
     * </pre>
     *
     * @return the resource collection
     */
    public Appointments appointments() {
      return new Appointments();
    }

    /**
     * The "appointments" collection of methods.
     */
    public class Appointments {

      /**
       * Create a request for the method "appointments.get".
       *
       * This request holds the parameters needed by the clinic server.  After setting any optional
       * parameters, call the {@link Get#execute()} method to invoke the remote operation.
       *
       * @param doctorID
       * @param id
       * @return the request
       */
      public Get get(java.lang.Long doctorID, java.lang.Long id) throws java.io.IOException {
        Get result = new Get(doctorID, id);
        initialize(result);
        return result;
      }

      public class Get extends ClinicRequest<com.example.clinic.model.Appointment> {

        private static final String REST_PATH = "doctors/{doctorID}/appointment/{id}";

        /**
         * Create a request for the method "appointments.get".
         *
         * This request holds the parameters needed by the the clinic server.  After setting any optional
         * parameters, call the {@link Get#execute()} method to invoke the remote operation. <p> {@link
         * Get#initialize(com.google.api.client.googleapis.services.AbstractGoogleClientRequest)} must be
         * called to initialize this instance immediately after invoking the constructor. </p>
         *
         * @param doctorID
         * @param id
         * @since 1.13
         */
        protected Get(java.lang.Long doctorID, java.lang.Long id) {
          super(Clinic.this, "GET", REST_PATH, null, com.example.clinic.model.Appointment.class);
          this.doctorID = com.google.api.client.util.Preconditions.checkNotNull(doctorID, "Required parameter doctorID must be specified.");
          this.id = com.google.api.client.util.Preconditions.checkNotNull(id, "Required parameter id must be specified.");
        }

        @Override
        public com.google.api.client.http.HttpResponse executeUsingHead() throws java.io.IOException {
          return super.executeUsingHead();
        }

        @Override
        public com.google.api.client.http.HttpRequest buildHttpRequestUsingHead() throws java.io.IOException {
          return super.buildHttpRequestUsingHead();
        }

        @Override
        public Get setAlt(java.lang.String alt) {
          return (Get) super.setAlt(alt);
        }

        @Override
        public Get setFields(java.lang.String fields) {
          return (Get) super.setFields(fields);
        }

        @Override
        public Get setKey(java.lang.String key) {
          return (Get) super.setKey(key);
        }

        @Override
        public Get setOauthToken(java.lang.String oauthToken) {
          return (Get) super.setOauthToken(oauthToken);
        }

        @Override
        public Get setPrettyPrint(java.lang.Boolean prettyPrint) {
          return (Get) super.setPrettyPrint(prettyPrint);
        }

        @Override
        public Get setQuotaUser(java.lang.String quotaUser) {
          return (Get) super.setQuotaUser(quotaUser);
        }

        @Override
        public Get setUserIp(java.lang.String userIp) {
          return (Get) super.setUserIp(userIp);
        }

        @com.google.api.client.util.Key
        private java.lang.Long doctorID;

        /**

         */
        public java.lang.Long getDoctorID() {
          return doctorID;
        }

        public Get setDoctorID(java.lang.Long doctorID) {
          this.doctorID = doctorID;
          return this;
        }

        @com.google.api.client.util.Key
        private java.lang.Long id;

        /**

         */
        public java.lang.Long getId() {
          return id;
        }

        public Get setId(java.lang.Long id) {
          this.id = id;
          return this;
        }

        @Override
        public Get set(String parameterName, Object value) {
          return (Get) super.set(parameterName, value);
        }
      }
      /**
       * Create a request for the method "appointments.insert".
       *
       * This request holds the parameters needed by the clinic server.  After setting any optional
       * parameters, call the {@link Insert#execute()} method to invoke the remote operation.
       *
       * @param doctorID
       * @param content the {@link com.example.clinic.model.Appointment}
       * @return the request
       */
      public Insert insert(java.lang.Long doctorID, com.example.clinic.model.Appointment content) throws java.io.IOException {
        Insert result = new Insert(doctorID, content);
        initialize(result);
        return result;
      }

      public class Insert extends ClinicRequest<com.example.clinic.model.Appointment> {

        private static final String REST_PATH = "doctors/{doctorID}/appointment";

        /**
         * Create a request for the method "appointments.insert".
         *
         * This request holds the parameters needed by the the clinic server.  After setting any optional
         * parameters, call the {@link Insert#execute()} method to invoke the remote operation. <p> {@link
         * Insert#initialize(com.google.api.client.googleapis.services.AbstractGoogleClientRequest)} must
         * be called to initialize this instance immediately after invoking the constructor. </p>
         *
         * @param doctorID
         * @param content the {@link com.example.clinic.model.Appointment}
         * @since 1.13
         */
        protected Insert(java.lang.Long doctorID, com.example.clinic.model.Appointment content) {
          super(Clinic.this, "POST", REST_PATH, content, com.example.clinic.model.Appointment.class);
          this.doctorID = com.google.api.client.util.Preconditions.checkNotNull(doctorID, "Required parameter doctorID must be specified.");
        }

        @Override
        public Insert setAlt(java.lang.String alt) {
          return (Insert) super.setAlt(alt);
        }

        @Override
        public Insert setFields(java.lang.String fields) {
          return (Insert) super.setFields(fields);
        }

        @Override
        public Insert setKey(java.lang.String key) {
          return (Insert) super.setKey(key);
        }

        @Override
        public Insert setOauthToken(java.lang.String oauthToken) {
          return (Insert) super.setOauthToken(oauthToken);
        }

        @Override
        public Insert setPrettyPrint(java.lang.Boolean prettyPrint) {
          return (Insert) super.setPrettyPrint(prettyPrint);
        }

        @Override
        public Insert setQuotaUser(java.lang.String quotaUser) {
          return (Insert) super.setQuotaUser(quotaUser);
        }

        @Override
        public Insert setUserIp(java.lang.String userIp) {
          return (Insert) super.setUserIp(userIp);
        }

        @com.google.api.client.util.Key
        private java.lang.Long doctorID;

        /**

         */
        public java.lang.Long getDoctorID() {
          return doctorID;
        }

        public Insert setDoctorID(java.lang.Long doctorID) {
          this.doctorID = doctorID;
          return this;
        }

        @Override
        public Insert set(String parameterName, Object value) {
          return (Insert) super.set(parameterName, value);
        }
      }
      /**
       * Create a request for the method "appointments.list".
       *
       * This request holds the parameters needed by the clinic server.  After setting any optional
       * parameters, call the {@link List#execute()} method to invoke the remote operation.
       *
       * @param doctorID
       * @return the request
       */
      public List list(java.lang.Long doctorID) throws java.io.IOException {
        List result = new List(doctorID);
        initialize(result);
        return result;
      }

      public class List extends ClinicRequest<com.example.clinic.model.AppointmentCollection> {

        private static final String REST_PATH = "doctors/{doctorID}/appointment";

        /**
         * Create a request for the method "appointments.list".
         *
         * This request holds the parameters needed by the the clinic server.  After setting any optional
         * parameters, call the {@link List#execute()} method to invoke the remote operation. <p> {@link
         * List#initialize(com.google.api.client.googleapis.services.AbstractGoogleClientRequest)} must be
         * called to initialize this instance immediately after invoking the constructor. </p>
         *
         * @param doctorID
         * @since 1.13
         */
        protected List(java.lang.Long doctorID) {
          super(Clinic.this, "GET", REST_PATH, null, com.example.clinic.model.AppointmentCollection.class);
          this.doctorID = com.google.api.client.util.Preconditions.checkNotNull(doctorID, "Required parameter doctorID must be specified.");
        }

        @Override
        public com.google.api.client.http.HttpResponse executeUsingHead() throws java.io.IOException {
          return super.executeUsingHead();
        }

        @Override
        public com.google.api.client.http.HttpRequest buildHttpRequestUsingHead() throws java.io.IOException {
          return super.buildHttpRequestUsingHead();
        }

        @Override
        public List setAlt(java.lang.String alt) {
          return (List) super.setAlt(alt);
        }

        @Override
        public List setFields(java.lang.String fields) {
          return (List) super.setFields(fields);
        }

        @Override
        public List setKey(java.lang.String key) {
          return (List) super.setKey(key);
        }

        @Override
        public List setOauthToken(java.lang.String oauthToken) {
          return (List) super.setOauthToken(oauthToken);
        }

        @Override
        public List setPrettyPrint(java.lang.Boolean prettyPrint) {
          return (List) super.setPrettyPrint(prettyPrint);
        }

        @Override
        public List setQuotaUser(java.lang.String quotaUser) {
          return (List) super.setQuotaUser(quotaUser);
        }

        @Override
        public List setUserIp(java.lang.String userIp) {
          return (List) super.setUserIp(userIp);
        }

        @com.google.api.client.util.Key
        private java.lang.Long doctorID;

        /**

         */
        public java.lang.Long getDoctorID() {
          return doctorID;
        }

        public List setDoctorID(java.lang.Long doctorID) {
          this.doctorID = doctorID;
          return this;
        }

        @Override
        public List set(String parameterName, Object value) {
          return (List) super.set(parameterName, value);
        }
      }
      /**
       * Create a request for the method "appointments.patch".
       *
       * This request holds the parameters needed by the clinic server.  After setting any optional
       * parameters, call the {@link Patch#execute()} method to invoke the remote operation.
       *
       * @param doctorID
       * @param id
       * @param content the {@link com.example.clinic.model.Appointment}
       * @return the request
       */
      public Patch patch(java.lang.Long doctorID, java.lang.Long id, com.example.clinic.model.Appointment content) throws java.io.IOException {
        Patch result = new Patch(doctorID, id, content);
        initialize(result);
        return result;
      }

      public class Patch extends ClinicRequest<com.example.clinic.model.Appointment> {

        private static final String REST_PATH = "doctors/{doctorID}/appointment";

        /**
         * Create a request for the method "appointments.patch".
         *
         * This request holds the parameters needed by the the clinic server.  After setting any optional
         * parameters, call the {@link Patch#execute()} method to invoke the remote operation. <p> {@link
         * Patch#initialize(com.google.api.client.googleapis.services.AbstractGoogleClientRequest)} must
         * be called to initialize this instance immediately after invoking the constructor. </p>
         *
         * @param doctorID
         * @param id
         * @param content the {@link com.example.clinic.model.Appointment}
         * @since 1.13
         */
        protected Patch(java.lang.Long doctorID, java.lang.Long id, com.example.clinic.model.Appointment content) {
          super(Clinic.this, "PATCH", REST_PATH, content, com.example.clinic.model.Appointment.class);
          this.doctorID = com.google.api.client.util.Preconditions.checkNotNull(doctorID, "Required parameter doctorID must be specified.");
          this.id = com.google.api.client.util.Preconditions.checkNotNull(id, "Required parameter id must be specified.");
        }

        @Override
        public Patch setAlt(java.lang.String alt) {
          return (Patch) super.setAlt(alt);
        }

        @Override
        public Patch setFields(java.lang.String fields) {
          return (Patch) super.setFields(fields);
        }

        @Override
        public Patch setKey(java.lang.String key) {
          return (Patch) super.setKey(key);
        }

        @Override
        public Patch setOauthToken(java.lang.String oauthToken) {
          return (Patch) super.setOauthToken(oauthToken);
        }

        @Override
        public Patch setPrettyPrint(java.lang.Boolean prettyPrint) {
          return (Patch) super.setPrettyPrint(prettyPrint);
        }

        @Override
        public Patch setQuotaUser(java.lang.String quotaUser) {
          return (Patch) super.setQuotaUser(quotaUser);
        }

        @Override
        public Patch setUserIp(java.lang.String userIp) {
          return (Patch) super.setUserIp(userIp);
        }

        @com.google.api.client.util.Key
        private java.lang.Long doctorID;

        /**

         */
        public java.lang.Long getDoctorID() {
          return doctorID;
        }

        public Patch setDoctorID(java.lang.Long doctorID) {
          this.doctorID = doctorID;
          return this;
        }

        @com.google.api.client.util.Key
        private java.lang.Long id;

        /**

         */
        public java.lang.Long getId() {
          return id;
        }

        public Patch setId(java.lang.Long id) {
          this.id = id;
          return this;
        }

        @Override
        public Patch set(String parameterName, Object value) {
          return (Patch) super.set(parameterName, value);
        }
      }
      /**
       * Create a request for the method "appointments.update".
       *
       * This request holds the parameters needed by the clinic server.  After setting any optional
       * parameters, call the {@link Update#execute()} method to invoke the remote operation.
       *
       * @param doctorID
       * @param id
       * @param content the {@link com.example.clinic.model.Appointment}
       * @return the request
       */
      public Update update(java.lang.Long doctorID, java.lang.Long id, com.example.clinic.model.Appointment content) throws java.io.IOException {
        Update result = new Update(doctorID, id, content);
        initialize(result);
        return result;
      }

      public class Update extends ClinicRequest<com.example.clinic.model.Appointment> {

        private static final String REST_PATH = "doctors/{doctorID}/appointment";

        /**
         * Create a request for the method "appointments.update".
         *
         * This request holds the parameters needed by the the clinic server.  After setting any optional
         * parameters, call the {@link Update#execute()} method to invoke the remote operation. <p> {@link
         * Update#initialize(com.google.api.client.googleapis.services.AbstractGoogleClientRequest)} must
         * be called to initialize this instance immediately after invoking the constructor. </p>
         *
         * @param doctorID
         * @param id
         * @param content the {@link com.example.clinic.model.Appointment}
         * @since 1.13
         */
        protected Update(java.lang.Long doctorID, java.lang.Long id, com.example.clinic.model.Appointment content) {
          super(Clinic.this, "PUT", REST_PATH, content, com.example.clinic.model.Appointment.class);
          this.doctorID = com.google.api.client.util.Preconditions.checkNotNull(doctorID, "Required parameter doctorID must be specified.");
          this.id = com.google.api.client.util.Preconditions.checkNotNull(id, "Required parameter id must be specified.");
        }

        @Override
        public Update setAlt(java.lang.String alt) {
          return (Update) super.setAlt(alt);
        }

        @Override
        public Update setFields(java.lang.String fields) {
          return (Update) super.setFields(fields);
        }

        @Override
        public Update setKey(java.lang.String key) {
          return (Update) super.setKey(key);
        }

        @Override
        public Update setOauthToken(java.lang.String oauthToken) {
          return (Update) super.setOauthToken(oauthToken);
        }

        @Override
        public Update setPrettyPrint(java.lang.Boolean prettyPrint) {
          return (Update) super.setPrettyPrint(prettyPrint);
        }

        @Override
        public Update setQuotaUser(java.lang.String quotaUser) {
          return (Update) super.setQuotaUser(quotaUser);
        }

        @Override
        public Update setUserIp(java.lang.String userIp) {
          return (Update) super.setUserIp(userIp);
        }

        @com.google.api.client.util.Key
        private java.lang.Long doctorID;

        /**

         */
        public java.lang.Long getDoctorID() {
          return doctorID;
        }

        public Update setDoctorID(java.lang.Long doctorID) {
          this.doctorID = doctorID;
          return this;
        }

        @com.google.api.client.util.Key
        private java.lang.Long id;

        /**

         */
        public java.lang.Long getId() {
          return id;
        }

        public Update setId(java.lang.Long id) {
          this.id = id;
          return this;
        }

        @Override
        public Update set(String parameterName, Object value) {
          return (Update) super.set(parameterName, value);
        }
      }

    }
  }

  /**
   * An accessor for creating requests from the Patients collection.
   *
   * <p>The typical use is:</p>
   * <pre>
   *   {@code Clinic clinic = new Clinic(...);}
   *   {@code Clinic.Patients.List request = clinic.patients().list(parameters ...)}
   * </pre>
   *
   * @return the resource collection
   */
  public Patients patients() {
    return new Patients();
  }

  /**
   * The "patients" collection of methods.
   */
  public class Patients {

    /**
     * An accessor for creating requests from the Appointments collection.
     *
     * <p>The typical use is:</p>
     * <pre>
     *   {@code Clinic clinic = new Clinic(...);}
     *   {@code Clinic.Appointments.List request = clinic.appointments().list(parameters ...)}
     * </pre>
     *
     * @return the resource collection
     */
    public Appointments appointments() {
      return new Appointments();
    }

    /**
     * The "appointments" collection of methods.
     */
    public class Appointments {

      /**
       * Create a request for the method "appointments.delete".
       *
       * This request holds the parameters needed by the clinic server.  After setting any optional
       * parameters, call the {@link Delete#execute()} method to invoke the remote operation.
       *
       * @param doctorID
       * @param id
       * @return the request
       */
      public Delete delete(java.lang.Long doctorID, java.lang.Long id) throws java.io.IOException {
        Delete result = new Delete(doctorID, id);
        initialize(result);
        return result;
      }

      public class Delete extends ClinicRequest<Void> {

        private static final String REST_PATH = "doctors/{doctorID}/appointment/{id}";

        /**
         * Create a request for the method "appointments.delete".
         *
         * This request holds the parameters needed by the the clinic server.  After setting any optional
         * parameters, call the {@link Delete#execute()} method to invoke the remote operation. <p> {@link
         * Delete#initialize(com.google.api.client.googleapis.services.AbstractGoogleClientRequest)} must
         * be called to initialize this instance immediately after invoking the constructor. </p>
         *
         * @param doctorID
         * @param id
         * @since 1.13
         */
        protected Delete(java.lang.Long doctorID, java.lang.Long id) {
          super(Clinic.this, "DELETE", REST_PATH, null, Void.class);
          this.doctorID = com.google.api.client.util.Preconditions.checkNotNull(doctorID, "Required parameter doctorID must be specified.");
          this.id = com.google.api.client.util.Preconditions.checkNotNull(id, "Required parameter id must be specified.");
        }

        @Override
        public Delete setAlt(java.lang.String alt) {
          return (Delete) super.setAlt(alt);
        }

        @Override
        public Delete setFields(java.lang.String fields) {
          return (Delete) super.setFields(fields);
        }

        @Override
        public Delete setKey(java.lang.String key) {
          return (Delete) super.setKey(key);
        }

        @Override
        public Delete setOauthToken(java.lang.String oauthToken) {
          return (Delete) super.setOauthToken(oauthToken);
        }

        @Override
        public Delete setPrettyPrint(java.lang.Boolean prettyPrint) {
          return (Delete) super.setPrettyPrint(prettyPrint);
        }

        @Override
        public Delete setQuotaUser(java.lang.String quotaUser) {
          return (Delete) super.setQuotaUser(quotaUser);
        }

        @Override
        public Delete setUserIp(java.lang.String userIp) {
          return (Delete) super.setUserIp(userIp);
        }

        @com.google.api.client.util.Key
        private java.lang.Long doctorID;

        /**

         */
        public java.lang.Long getDoctorID() {
          return doctorID;
        }

        public Delete setDoctorID(java.lang.Long doctorID) {
          this.doctorID = doctorID;
          return this;
        }

        @com.google.api.client.util.Key
        private java.lang.Long id;

        /**

         */
        public java.lang.Long getId() {
          return id;
        }

        public Delete setId(java.lang.Long id) {
          this.id = id;
          return this;
        }

        @Override
        public Delete set(String parameterName, Object value) {
          return (Delete) super.set(parameterName, value);
        }
      }
      /**
       * Create a request for the method "appointments.list".
       *
       * This request holds the parameters needed by the clinic server.  After setting any optional
       * parameters, call the {@link List#execute()} method to invoke the remote operation.
       *
       * @param patientID
       * @return the request
       */
      public List list(java.lang.Long patientID) throws java.io.IOException {
        List result = new List(patientID);
        initialize(result);
        return result;
      }

      public class List extends ClinicRequest<com.example.clinic.model.AppointmentCollection> {

        private static final String REST_PATH = "patients/{patientID}/appointment";

        /**
         * Create a request for the method "appointments.list".
         *
         * This request holds the parameters needed by the the clinic server.  After setting any optional
         * parameters, call the {@link List#execute()} method to invoke the remote operation. <p> {@link
         * List#initialize(com.google.api.client.googleapis.services.AbstractGoogleClientRequest)} must be
         * called to initialize this instance immediately after invoking the constructor. </p>
         *
         * @param patientID
         * @since 1.13
         */
        protected List(java.lang.Long patientID) {
          super(Clinic.this, "GET", REST_PATH, null, com.example.clinic.model.AppointmentCollection.class);
          this.patientID = com.google.api.client.util.Preconditions.checkNotNull(patientID, "Required parameter patientID must be specified.");
        }

        @Override
        public com.google.api.client.http.HttpResponse executeUsingHead() throws java.io.IOException {
          return super.executeUsingHead();
        }

        @Override
        public com.google.api.client.http.HttpRequest buildHttpRequestUsingHead() throws java.io.IOException {
          return super.buildHttpRequestUsingHead();
        }

        @Override
        public List setAlt(java.lang.String alt) {
          return (List) super.setAlt(alt);
        }

        @Override
        public List setFields(java.lang.String fields) {
          return (List) super.setFields(fields);
        }

        @Override
        public List setKey(java.lang.String key) {
          return (List) super.setKey(key);
        }

        @Override
        public List setOauthToken(java.lang.String oauthToken) {
          return (List) super.setOauthToken(oauthToken);
        }

        @Override
        public List setPrettyPrint(java.lang.Boolean prettyPrint) {
          return (List) super.setPrettyPrint(prettyPrint);
        }

        @Override
        public List setQuotaUser(java.lang.String quotaUser) {
          return (List) super.setQuotaUser(quotaUser);
        }

        @Override
        public List setUserIp(java.lang.String userIp) {
          return (List) super.setUserIp(userIp);
        }

        @com.google.api.client.util.Key
        private java.lang.Long patientID;

        /**

         */
        public java.lang.Long getPatientID() {
          return patientID;
        }

        public List setPatientID(java.lang.Long patientID) {
          this.patientID = patientID;
          return this;
        }

        @Override
        public List set(String parameterName, Object value) {
          return (List) super.set(parameterName, value);
        }
      }
      /**
       * Create a request for the method "appointments.update".
       *
       * This request holds the parameters needed by the clinic server.  After setting any optional
       * parameters, call the {@link Update#execute()} method to invoke the remote operation.
       *
       * @param id
       * @param doctorID
       * @param content the {@link com.example.clinic.model.Appointment}
       * @return the request
       */
      public Update update(java.lang.Long id, java.lang.Long doctorID, com.example.clinic.model.Appointment content) throws java.io.IOException {
        Update result = new Update(id, doctorID, content);
        initialize(result);
        return result;
      }

      public class Update extends ClinicRequest<com.example.clinic.model.Appointment> {

        private static final String REST_PATH = "patients/{id}/appointment";

        /**
         * Create a request for the method "appointments.update".
         *
         * This request holds the parameters needed by the the clinic server.  After setting any optional
         * parameters, call the {@link Update#execute()} method to invoke the remote operation. <p> {@link
         * Update#initialize(com.google.api.client.googleapis.services.AbstractGoogleClientRequest)} must
         * be called to initialize this instance immediately after invoking the constructor. </p>
         *
         * @param id
         * @param doctorID
         * @param content the {@link com.example.clinic.model.Appointment}
         * @since 1.13
         */
        protected Update(java.lang.Long id, java.lang.Long doctorID, com.example.clinic.model.Appointment content) {
          super(Clinic.this, "PUT", REST_PATH, content, com.example.clinic.model.Appointment.class);
          this.id = com.google.api.client.util.Preconditions.checkNotNull(id, "Required parameter id must be specified.");
          this.doctorID = com.google.api.client.util.Preconditions.checkNotNull(doctorID, "Required parameter doctorID must be specified.");
        }

        @Override
        public Update setAlt(java.lang.String alt) {
          return (Update) super.setAlt(alt);
        }

        @Override
        public Update setFields(java.lang.String fields) {
          return (Update) super.setFields(fields);
        }

        @Override
        public Update setKey(java.lang.String key) {
          return (Update) super.setKey(key);
        }

        @Override
        public Update setOauthToken(java.lang.String oauthToken) {
          return (Update) super.setOauthToken(oauthToken);
        }

        @Override
        public Update setPrettyPrint(java.lang.Boolean prettyPrint) {
          return (Update) super.setPrettyPrint(prettyPrint);
        }

        @Override
        public Update setQuotaUser(java.lang.String quotaUser) {
          return (Update) super.setQuotaUser(quotaUser);
        }

        @Override
        public Update setUserIp(java.lang.String userIp) {
          return (Update) super.setUserIp(userIp);
        }

        @com.google.api.client.util.Key
        private java.lang.Long id;

        /**

         */
        public java.lang.Long getId() {
          return id;
        }

        public Update setId(java.lang.Long id) {
          this.id = id;
          return this;
        }

        @com.google.api.client.util.Key
        private java.lang.Long doctorID;

        /**

         */
        public java.lang.Long getDoctorID() {
          return doctorID;
        }

        public Update setDoctorID(java.lang.Long doctorID) {
          this.doctorID = doctorID;
          return this;
        }

        @Override
        public Update set(String parameterName, Object value) {
          return (Update) super.set(parameterName, value);
        }
      }

    }
  }

  /**
   * Create a request for the method "getDoctor".
   *
   * This request holds the parameters needed by the clinic server.  After setting any optional
   * parameters, call the {@link GetDoctor#execute()} method to invoke the remote operation.
   *
   * @param id
   * @return the request
   */
  public GetDoctor getDoctor(java.lang.Long id) throws java.io.IOException {
    GetDoctor result = new GetDoctor(id);
    initialize(result);
    return result;
  }

  public class GetDoctor extends ClinicRequest<com.example.clinic.model.Doctor> {

    private static final String REST_PATH = "doctor/{id}";

    /**
     * Create a request for the method "getDoctor".
     *
     * This request holds the parameters needed by the the clinic server.  After setting any optional
     * parameters, call the {@link GetDoctor#execute()} method to invoke the remote operation. <p>
     * {@link
     * GetDoctor#initialize(com.google.api.client.googleapis.services.AbstractGoogleClientRequest)}
     * must be called to initialize this instance immediately after invoking the constructor. </p>
     *
     * @param id
     * @since 1.13
     */
    protected GetDoctor(java.lang.Long id) {
      super(Clinic.this, "GET", REST_PATH, null, com.example.clinic.model.Doctor.class);
      this.id = com.google.api.client.util.Preconditions.checkNotNull(id, "Required parameter id must be specified.");
    }

    @Override
    public com.google.api.client.http.HttpResponse executeUsingHead() throws java.io.IOException {
      return super.executeUsingHead();
    }

    @Override
    public com.google.api.client.http.HttpRequest buildHttpRequestUsingHead() throws java.io.IOException {
      return super.buildHttpRequestUsingHead();
    }

    @Override
    public GetDoctor setAlt(java.lang.String alt) {
      return (GetDoctor) super.setAlt(alt);
    }

    @Override
    public GetDoctor setFields(java.lang.String fields) {
      return (GetDoctor) super.setFields(fields);
    }

    @Override
    public GetDoctor setKey(java.lang.String key) {
      return (GetDoctor) super.setKey(key);
    }

    @Override
    public GetDoctor setOauthToken(java.lang.String oauthToken) {
      return (GetDoctor) super.setOauthToken(oauthToken);
    }

    @Override
    public GetDoctor setPrettyPrint(java.lang.Boolean prettyPrint) {
      return (GetDoctor) super.setPrettyPrint(prettyPrint);
    }

    @Override
    public GetDoctor setQuotaUser(java.lang.String quotaUser) {
      return (GetDoctor) super.setQuotaUser(quotaUser);
    }

    @Override
    public GetDoctor setUserIp(java.lang.String userIp) {
      return (GetDoctor) super.setUserIp(userIp);
    }

    @com.google.api.client.util.Key
    private java.lang.Long id;

    /**

     */
    public java.lang.Long getId() {
      return id;
    }

    public GetDoctor setId(java.lang.Long id) {
      this.id = id;
      return this;
    }

    @Override
    public GetDoctor set(String parameterName, Object value) {
      return (GetDoctor) super.set(parameterName, value);
    }
  }

  /**
   * Create a request for the method "getPatient".
   *
   * This request holds the parameters needed by the clinic server.  After setting any optional
   * parameters, call the {@link GetPatient#execute()} method to invoke the remote operation.
   *
   * @param id
   * @return the request
   */
  public GetPatient getPatient(java.lang.Long id) throws java.io.IOException {
    GetPatient result = new GetPatient(id);
    initialize(result);
    return result;
  }

  public class GetPatient extends ClinicRequest<com.example.clinic.model.Patient> {

    private static final String REST_PATH = "patient/{id}";

    /**
     * Create a request for the method "getPatient".
     *
     * This request holds the parameters needed by the the clinic server.  After setting any optional
     * parameters, call the {@link GetPatient#execute()} method to invoke the remote operation. <p>
     * {@link
     * GetPatient#initialize(com.google.api.client.googleapis.services.AbstractGoogleClientRequest)}
     * must be called to initialize this instance immediately after invoking the constructor. </p>
     *
     * @param id
     * @since 1.13
     */
    protected GetPatient(java.lang.Long id) {
      super(Clinic.this, "GET", REST_PATH, null, com.example.clinic.model.Patient.class);
      this.id = com.google.api.client.util.Preconditions.checkNotNull(id, "Required parameter id must be specified.");
    }

    @Override
    public com.google.api.client.http.HttpResponse executeUsingHead() throws java.io.IOException {
      return super.executeUsingHead();
    }

    @Override
    public com.google.api.client.http.HttpRequest buildHttpRequestUsingHead() throws java.io.IOException {
      return super.buildHttpRequestUsingHead();
    }

    @Override
    public GetPatient setAlt(java.lang.String alt) {
      return (GetPatient) super.setAlt(alt);
    }

    @Override
    public GetPatient setFields(java.lang.String fields) {
      return (GetPatient) super.setFields(fields);
    }

    @Override
    public GetPatient setKey(java.lang.String key) {
      return (GetPatient) super.setKey(key);
    }

    @Override
    public GetPatient setOauthToken(java.lang.String oauthToken) {
      return (GetPatient) super.setOauthToken(oauthToken);
    }

    @Override
    public GetPatient setPrettyPrint(java.lang.Boolean prettyPrint) {
      return (GetPatient) super.setPrettyPrint(prettyPrint);
    }

    @Override
    public GetPatient setQuotaUser(java.lang.String quotaUser) {
      return (GetPatient) super.setQuotaUser(quotaUser);
    }

    @Override
    public GetPatient setUserIp(java.lang.String userIp) {
      return (GetPatient) super.setUserIp(userIp);
    }

    @com.google.api.client.util.Key
    private java.lang.Long id;

    /**

     */
    public java.lang.Long getId() {
      return id;
    }

    public GetPatient setId(java.lang.Long id) {
      this.id = id;
      return this;
    }

    @Override
    public GetPatient set(String parameterName, Object value) {
      return (GetPatient) super.set(parameterName, value);
    }
  }

  /**
   * Create a request for the method "getQueue".
   *
   * This request holds the parameters needed by the clinic server.  After setting any optional
   * parameters, call the {@link GetQueue#execute()} method to invoke the remote operation.
   *
   * @param id
   * @return the request
   */
  public GetQueue getQueue(java.lang.Long id) throws java.io.IOException {
    GetQueue result = new GetQueue(id);
    initialize(result);
    return result;
  }

  public class GetQueue extends ClinicRequest<com.example.clinic.model.Queue> {

    private static final String REST_PATH = "queue/{id}";

    /**
     * Create a request for the method "getQueue".
     *
     * This request holds the parameters needed by the the clinic server.  After setting any optional
     * parameters, call the {@link GetQueue#execute()} method to invoke the remote operation. <p>
     * {@link
     * GetQueue#initialize(com.google.api.client.googleapis.services.AbstractGoogleClientRequest)}
     * must be called to initialize this instance immediately after invoking the constructor. </p>
     *
     * @param id
     * @since 1.13
     */
    protected GetQueue(java.lang.Long id) {
      super(Clinic.this, "GET", REST_PATH, null, com.example.clinic.model.Queue.class);
      this.id = com.google.api.client.util.Preconditions.checkNotNull(id, "Required parameter id must be specified.");
    }

    @Override
    public com.google.api.client.http.HttpResponse executeUsingHead() throws java.io.IOException {
      return super.executeUsingHead();
    }

    @Override
    public com.google.api.client.http.HttpRequest buildHttpRequestUsingHead() throws java.io.IOException {
      return super.buildHttpRequestUsingHead();
    }

    @Override
    public GetQueue setAlt(java.lang.String alt) {
      return (GetQueue) super.setAlt(alt);
    }

    @Override
    public GetQueue setFields(java.lang.String fields) {
      return (GetQueue) super.setFields(fields);
    }

    @Override
    public GetQueue setKey(java.lang.String key) {
      return (GetQueue) super.setKey(key);
    }

    @Override
    public GetQueue setOauthToken(java.lang.String oauthToken) {
      return (GetQueue) super.setOauthToken(oauthToken);
    }

    @Override
    public GetQueue setPrettyPrint(java.lang.Boolean prettyPrint) {
      return (GetQueue) super.setPrettyPrint(prettyPrint);
    }

    @Override
    public GetQueue setQuotaUser(java.lang.String quotaUser) {
      return (GetQueue) super.setQuotaUser(quotaUser);
    }

    @Override
    public GetQueue setUserIp(java.lang.String userIp) {
      return (GetQueue) super.setUserIp(userIp);
    }

    @com.google.api.client.util.Key
    private java.lang.Long id;

    /**

     */
    public java.lang.Long getId() {
      return id;
    }

    public GetQueue setId(java.lang.Long id) {
      this.id = id;
      return this;
    }

    @Override
    public GetQueue set(String parameterName, Object value) {
      return (GetQueue) super.set(parameterName, value);
    }
  }

  /**
   * Create a request for the method "insertDoctor".
   *
   * This request holds the parameters needed by the clinic server.  After setting any optional
   * parameters, call the {@link InsertDoctor#execute()} method to invoke the remote operation.
   *
   * @param content the {@link com.example.clinic.model.Doctor}
   * @return the request
   */
  public InsertDoctor insertDoctor(com.example.clinic.model.Doctor content) throws java.io.IOException {
    InsertDoctor result = new InsertDoctor(content);
    initialize(result);
    return result;
  }

  public class InsertDoctor extends ClinicRequest<com.example.clinic.model.Doctor> {

    private static final String REST_PATH = "doctor";

    /**
     * Create a request for the method "insertDoctor".
     *
     * This request holds the parameters needed by the the clinic server.  After setting any optional
     * parameters, call the {@link InsertDoctor#execute()} method to invoke the remote operation. <p>
     * {@link
     * InsertDoctor#initialize(com.google.api.client.googleapis.services.AbstractGoogleClientRequest)}
     * must be called to initialize this instance immediately after invoking the constructor. </p>
     *
     * @param content the {@link com.example.clinic.model.Doctor}
     * @since 1.13
     */
    protected InsertDoctor(com.example.clinic.model.Doctor content) {
      super(Clinic.this, "POST", REST_PATH, content, com.example.clinic.model.Doctor.class);
    }

    @Override
    public InsertDoctor setAlt(java.lang.String alt) {
      return (InsertDoctor) super.setAlt(alt);
    }

    @Override
    public InsertDoctor setFields(java.lang.String fields) {
      return (InsertDoctor) super.setFields(fields);
    }

    @Override
    public InsertDoctor setKey(java.lang.String key) {
      return (InsertDoctor) super.setKey(key);
    }

    @Override
    public InsertDoctor setOauthToken(java.lang.String oauthToken) {
      return (InsertDoctor) super.setOauthToken(oauthToken);
    }

    @Override
    public InsertDoctor setPrettyPrint(java.lang.Boolean prettyPrint) {
      return (InsertDoctor) super.setPrettyPrint(prettyPrint);
    }

    @Override
    public InsertDoctor setQuotaUser(java.lang.String quotaUser) {
      return (InsertDoctor) super.setQuotaUser(quotaUser);
    }

    @Override
    public InsertDoctor setUserIp(java.lang.String userIp) {
      return (InsertDoctor) super.setUserIp(userIp);
    }

    @Override
    public InsertDoctor set(String parameterName, Object value) {
      return (InsertDoctor) super.set(parameterName, value);
    }
  }

  /**
   * Create a request for the method "insertPatient".
   *
   * This request holds the parameters needed by the clinic server.  After setting any optional
   * parameters, call the {@link InsertPatient#execute()} method to invoke the remote operation.
   *
   * @param content the {@link com.example.clinic.model.Patient}
   * @return the request
   */
  public InsertPatient insertPatient(com.example.clinic.model.Patient content) throws java.io.IOException {
    InsertPatient result = new InsertPatient(content);
    initialize(result);
    return result;
  }

  public class InsertPatient extends ClinicRequest<com.example.clinic.model.Patient> {

    private static final String REST_PATH = "patient";

    /**
     * Create a request for the method "insertPatient".
     *
     * This request holds the parameters needed by the the clinic server.  After setting any optional
     * parameters, call the {@link InsertPatient#execute()} method to invoke the remote operation. <p>
     * {@link InsertPatient#initialize(com.google.api.client.googleapis.services.AbstractGoogleClientR
     * equest)} must be called to initialize this instance immediately after invoking the constructor.
     * </p>
     *
     * @param content the {@link com.example.clinic.model.Patient}
     * @since 1.13
     */
    protected InsertPatient(com.example.clinic.model.Patient content) {
      super(Clinic.this, "POST", REST_PATH, content, com.example.clinic.model.Patient.class);
    }

    @Override
    public InsertPatient setAlt(java.lang.String alt) {
      return (InsertPatient) super.setAlt(alt);
    }

    @Override
    public InsertPatient setFields(java.lang.String fields) {
      return (InsertPatient) super.setFields(fields);
    }

    @Override
    public InsertPatient setKey(java.lang.String key) {
      return (InsertPatient) super.setKey(key);
    }

    @Override
    public InsertPatient setOauthToken(java.lang.String oauthToken) {
      return (InsertPatient) super.setOauthToken(oauthToken);
    }

    @Override
    public InsertPatient setPrettyPrint(java.lang.Boolean prettyPrint) {
      return (InsertPatient) super.setPrettyPrint(prettyPrint);
    }

    @Override
    public InsertPatient setQuotaUser(java.lang.String quotaUser) {
      return (InsertPatient) super.setQuotaUser(quotaUser);
    }

    @Override
    public InsertPatient setUserIp(java.lang.String userIp) {
      return (InsertPatient) super.setUserIp(userIp);
    }

    @Override
    public InsertPatient set(String parameterName, Object value) {
      return (InsertPatient) super.set(parameterName, value);
    }
  }

  /**
   * Create a request for the method "insertQueue".
   *
   * This request holds the parameters needed by the clinic server.  After setting any optional
   * parameters, call the {@link InsertQueue#execute()} method to invoke the remote operation.
   *
   * @param content the {@link com.example.clinic.model.Queue}
   * @return the request
   */
  public InsertQueue insertQueue(com.example.clinic.model.Queue content) throws java.io.IOException {
    InsertQueue result = new InsertQueue(content);
    initialize(result);
    return result;
  }

  public class InsertQueue extends ClinicRequest<com.example.clinic.model.Queue> {

    private static final String REST_PATH = "queue";

    /**
     * Create a request for the method "insertQueue".
     *
     * This request holds the parameters needed by the the clinic server.  After setting any optional
     * parameters, call the {@link InsertQueue#execute()} method to invoke the remote operation. <p>
     * {@link
     * InsertQueue#initialize(com.google.api.client.googleapis.services.AbstractGoogleClientRequest)}
     * must be called to initialize this instance immediately after invoking the constructor. </p>
     *
     * @param content the {@link com.example.clinic.model.Queue}
     * @since 1.13
     */
    protected InsertQueue(com.example.clinic.model.Queue content) {
      super(Clinic.this, "POST", REST_PATH, content, com.example.clinic.model.Queue.class);
    }

    @Override
    public InsertQueue setAlt(java.lang.String alt) {
      return (InsertQueue) super.setAlt(alt);
    }

    @Override
    public InsertQueue setFields(java.lang.String fields) {
      return (InsertQueue) super.setFields(fields);
    }

    @Override
    public InsertQueue setKey(java.lang.String key) {
      return (InsertQueue) super.setKey(key);
    }

    @Override
    public InsertQueue setOauthToken(java.lang.String oauthToken) {
      return (InsertQueue) super.setOauthToken(oauthToken);
    }

    @Override
    public InsertQueue setPrettyPrint(java.lang.Boolean prettyPrint) {
      return (InsertQueue) super.setPrettyPrint(prettyPrint);
    }

    @Override
    public InsertQueue setQuotaUser(java.lang.String quotaUser) {
      return (InsertQueue) super.setQuotaUser(quotaUser);
    }

    @Override
    public InsertQueue setUserIp(java.lang.String userIp) {
      return (InsertQueue) super.setUserIp(userIp);
    }

    @Override
    public InsertQueue set(String parameterName, Object value) {
      return (InsertQueue) super.set(parameterName, value);
    }
  }

  /**
   * Create a request for the method "listDoctor".
   *
   * This request holds the parameters needed by the clinic server.  After setting any optional
   * parameters, call the {@link ListDoctor#execute()} method to invoke the remote operation.
   *
   * @return the request
   */
  public ListDoctor listDoctor() throws java.io.IOException {
    ListDoctor result = new ListDoctor();
    initialize(result);
    return result;
  }

  public class ListDoctor extends ClinicRequest<com.example.clinic.model.CollectionResponseDoctor> {

    private static final String REST_PATH = "doctor";

    /**
     * Create a request for the method "listDoctor".
     *
     * This request holds the parameters needed by the the clinic server.  After setting any optional
     * parameters, call the {@link ListDoctor#execute()} method to invoke the remote operation. <p>
     * {@link
     * ListDoctor#initialize(com.google.api.client.googleapis.services.AbstractGoogleClientRequest)}
     * must be called to initialize this instance immediately after invoking the constructor. </p>
     *
     * @since 1.13
     */
    protected ListDoctor() {
      super(Clinic.this, "GET", REST_PATH, null, com.example.clinic.model.CollectionResponseDoctor.class);
    }

    @Override
    public com.google.api.client.http.HttpResponse executeUsingHead() throws java.io.IOException {
      return super.executeUsingHead();
    }

    @Override
    public com.google.api.client.http.HttpRequest buildHttpRequestUsingHead() throws java.io.IOException {
      return super.buildHttpRequestUsingHead();
    }

    @Override
    public ListDoctor setAlt(java.lang.String alt) {
      return (ListDoctor) super.setAlt(alt);
    }

    @Override
    public ListDoctor setFields(java.lang.String fields) {
      return (ListDoctor) super.setFields(fields);
    }

    @Override
    public ListDoctor setKey(java.lang.String key) {
      return (ListDoctor) super.setKey(key);
    }

    @Override
    public ListDoctor setOauthToken(java.lang.String oauthToken) {
      return (ListDoctor) super.setOauthToken(oauthToken);
    }

    @Override
    public ListDoctor setPrettyPrint(java.lang.Boolean prettyPrint) {
      return (ListDoctor) super.setPrettyPrint(prettyPrint);
    }

    @Override
    public ListDoctor setQuotaUser(java.lang.String quotaUser) {
      return (ListDoctor) super.setQuotaUser(quotaUser);
    }

    @Override
    public ListDoctor setUserIp(java.lang.String userIp) {
      return (ListDoctor) super.setUserIp(userIp);
    }

    @com.google.api.client.util.Key
    private java.lang.String cursor;

    /**

     */
    public java.lang.String getCursor() {
      return cursor;
    }

    public ListDoctor setCursor(java.lang.String cursor) {
      this.cursor = cursor;
      return this;
    }

    @com.google.api.client.util.Key
    private java.lang.Integer limit;

    /**

     */
    public java.lang.Integer getLimit() {
      return limit;
    }

    public ListDoctor setLimit(java.lang.Integer limit) {
      this.limit = limit;
      return this;
    }

    @Override
    public ListDoctor set(String parameterName, Object value) {
      return (ListDoctor) super.set(parameterName, value);
    }
  }

  /**
   * Create a request for the method "listPatient".
   *
   * This request holds the parameters needed by the clinic server.  After setting any optional
   * parameters, call the {@link ListPatient#execute()} method to invoke the remote operation.
   *
   * @return the request
   */
  public ListPatient listPatient() throws java.io.IOException {
    ListPatient result = new ListPatient();
    initialize(result);
    return result;
  }

  public class ListPatient extends ClinicRequest<com.example.clinic.model.CollectionResponsePatient> {

    private static final String REST_PATH = "patient";

    /**
     * Create a request for the method "listPatient".
     *
     * This request holds the parameters needed by the the clinic server.  After setting any optional
     * parameters, call the {@link ListPatient#execute()} method to invoke the remote operation. <p>
     * {@link
     * ListPatient#initialize(com.google.api.client.googleapis.services.AbstractGoogleClientRequest)}
     * must be called to initialize this instance immediately after invoking the constructor. </p>
     *
     * @since 1.13
     */
    protected ListPatient() {
      super(Clinic.this, "GET", REST_PATH, null, com.example.clinic.model.CollectionResponsePatient.class);
    }

    @Override
    public com.google.api.client.http.HttpResponse executeUsingHead() throws java.io.IOException {
      return super.executeUsingHead();
    }

    @Override
    public com.google.api.client.http.HttpRequest buildHttpRequestUsingHead() throws java.io.IOException {
      return super.buildHttpRequestUsingHead();
    }

    @Override
    public ListPatient setAlt(java.lang.String alt) {
      return (ListPatient) super.setAlt(alt);
    }

    @Override
    public ListPatient setFields(java.lang.String fields) {
      return (ListPatient) super.setFields(fields);
    }

    @Override
    public ListPatient setKey(java.lang.String key) {
      return (ListPatient) super.setKey(key);
    }

    @Override
    public ListPatient setOauthToken(java.lang.String oauthToken) {
      return (ListPatient) super.setOauthToken(oauthToken);
    }

    @Override
    public ListPatient setPrettyPrint(java.lang.Boolean prettyPrint) {
      return (ListPatient) super.setPrettyPrint(prettyPrint);
    }

    @Override
    public ListPatient setQuotaUser(java.lang.String quotaUser) {
      return (ListPatient) super.setQuotaUser(quotaUser);
    }

    @Override
    public ListPatient setUserIp(java.lang.String userIp) {
      return (ListPatient) super.setUserIp(userIp);
    }

    @com.google.api.client.util.Key
    private java.lang.String cursor;

    /**

     */
    public java.lang.String getCursor() {
      return cursor;
    }

    public ListPatient setCursor(java.lang.String cursor) {
      this.cursor = cursor;
      return this;
    }

    @com.google.api.client.util.Key
    private java.lang.Integer limit;

    /**

     */
    public java.lang.Integer getLimit() {
      return limit;
    }

    public ListPatient setLimit(java.lang.Integer limit) {
      this.limit = limit;
      return this;
    }

    @Override
    public ListPatient set(String parameterName, Object value) {
      return (ListPatient) super.set(parameterName, value);
    }
  }

  /**
   * Create a request for the method "listQueue".
   *
   * This request holds the parameters needed by the clinic server.  After setting any optional
   * parameters, call the {@link ListQueue#execute()} method to invoke the remote operation.
   *
   * @return the request
   */
  public ListQueue listQueue() throws java.io.IOException {
    ListQueue result = new ListQueue();
    initialize(result);
    return result;
  }

  public class ListQueue extends ClinicRequest<com.example.clinic.model.CollectionResponseQueue> {

    private static final String REST_PATH = "queue";

    /**
     * Create a request for the method "listQueue".
     *
     * This request holds the parameters needed by the the clinic server.  After setting any optional
     * parameters, call the {@link ListQueue#execute()} method to invoke the remote operation. <p>
     * {@link
     * ListQueue#initialize(com.google.api.client.googleapis.services.AbstractGoogleClientRequest)}
     * must be called to initialize this instance immediately after invoking the constructor. </p>
     *
     * @since 1.13
     */
    protected ListQueue() {
      super(Clinic.this, "GET", REST_PATH, null, com.example.clinic.model.CollectionResponseQueue.class);
    }

    @Override
    public com.google.api.client.http.HttpResponse executeUsingHead() throws java.io.IOException {
      return super.executeUsingHead();
    }

    @Override
    public com.google.api.client.http.HttpRequest buildHttpRequestUsingHead() throws java.io.IOException {
      return super.buildHttpRequestUsingHead();
    }

    @Override
    public ListQueue setAlt(java.lang.String alt) {
      return (ListQueue) super.setAlt(alt);
    }

    @Override
    public ListQueue setFields(java.lang.String fields) {
      return (ListQueue) super.setFields(fields);
    }

    @Override
    public ListQueue setKey(java.lang.String key) {
      return (ListQueue) super.setKey(key);
    }

    @Override
    public ListQueue setOauthToken(java.lang.String oauthToken) {
      return (ListQueue) super.setOauthToken(oauthToken);
    }

    @Override
    public ListQueue setPrettyPrint(java.lang.Boolean prettyPrint) {
      return (ListQueue) super.setPrettyPrint(prettyPrint);
    }

    @Override
    public ListQueue setQuotaUser(java.lang.String quotaUser) {
      return (ListQueue) super.setQuotaUser(quotaUser);
    }

    @Override
    public ListQueue setUserIp(java.lang.String userIp) {
      return (ListQueue) super.setUserIp(userIp);
    }

    @com.google.api.client.util.Key
    private java.lang.String cursor;

    /**

     */
    public java.lang.String getCursor() {
      return cursor;
    }

    public ListQueue setCursor(java.lang.String cursor) {
      this.cursor = cursor;
      return this;
    }

    @com.google.api.client.util.Key
    private java.lang.Integer limit;

    /**

     */
    public java.lang.Integer getLimit() {
      return limit;
    }

    public ListQueue setLimit(java.lang.Integer limit) {
      this.limit = limit;
      return this;
    }

    @Override
    public ListQueue set(String parameterName, Object value) {
      return (ListQueue) super.set(parameterName, value);
    }
  }

  /**
   * Create a request for the method "removeDoctor".
   *
   * This request holds the parameters needed by the clinic server.  After setting any optional
   * parameters, call the {@link RemoveDoctor#execute()} method to invoke the remote operation.
   *
   * @param id
   * @return the request
   */
  public RemoveDoctor removeDoctor(java.lang.Long id) throws java.io.IOException {
    RemoveDoctor result = new RemoveDoctor(id);
    initialize(result);
    return result;
  }

  public class RemoveDoctor extends ClinicRequest<Void> {

    private static final String REST_PATH = "doctor/{id}";

    /**
     * Create a request for the method "removeDoctor".
     *
     * This request holds the parameters needed by the the clinic server.  After setting any optional
     * parameters, call the {@link RemoveDoctor#execute()} method to invoke the remote operation. <p>
     * {@link
     * RemoveDoctor#initialize(com.google.api.client.googleapis.services.AbstractGoogleClientRequest)}
     * must be called to initialize this instance immediately after invoking the constructor. </p>
     *
     * @param id
     * @since 1.13
     */
    protected RemoveDoctor(java.lang.Long id) {
      super(Clinic.this, "DELETE", REST_PATH, null, Void.class);
      this.id = com.google.api.client.util.Preconditions.checkNotNull(id, "Required parameter id must be specified.");
    }

    @Override
    public RemoveDoctor setAlt(java.lang.String alt) {
      return (RemoveDoctor) super.setAlt(alt);
    }

    @Override
    public RemoveDoctor setFields(java.lang.String fields) {
      return (RemoveDoctor) super.setFields(fields);
    }

    @Override
    public RemoveDoctor setKey(java.lang.String key) {
      return (RemoveDoctor) super.setKey(key);
    }

    @Override
    public RemoveDoctor setOauthToken(java.lang.String oauthToken) {
      return (RemoveDoctor) super.setOauthToken(oauthToken);
    }

    @Override
    public RemoveDoctor setPrettyPrint(java.lang.Boolean prettyPrint) {
      return (RemoveDoctor) super.setPrettyPrint(prettyPrint);
    }

    @Override
    public RemoveDoctor setQuotaUser(java.lang.String quotaUser) {
      return (RemoveDoctor) super.setQuotaUser(quotaUser);
    }

    @Override
    public RemoveDoctor setUserIp(java.lang.String userIp) {
      return (RemoveDoctor) super.setUserIp(userIp);
    }

    @com.google.api.client.util.Key
    private java.lang.Long id;

    /**

     */
    public java.lang.Long getId() {
      return id;
    }

    public RemoveDoctor setId(java.lang.Long id) {
      this.id = id;
      return this;
    }

    @Override
    public RemoveDoctor set(String parameterName, Object value) {
      return (RemoveDoctor) super.set(parameterName, value);
    }
  }

  /**
   * Create a request for the method "removePatient".
   *
   * This request holds the parameters needed by the clinic server.  After setting any optional
   * parameters, call the {@link RemovePatient#execute()} method to invoke the remote operation.
   *
   * @param id
   * @return the request
   */
  public RemovePatient removePatient(java.lang.Long id) throws java.io.IOException {
    RemovePatient result = new RemovePatient(id);
    initialize(result);
    return result;
  }

  public class RemovePatient extends ClinicRequest<Void> {

    private static final String REST_PATH = "patient/{id}";

    /**
     * Create a request for the method "removePatient".
     *
     * This request holds the parameters needed by the the clinic server.  After setting any optional
     * parameters, call the {@link RemovePatient#execute()} method to invoke the remote operation. <p>
     * {@link RemovePatient#initialize(com.google.api.client.googleapis.services.AbstractGoogleClientR
     * equest)} must be called to initialize this instance immediately after invoking the constructor.
     * </p>
     *
     * @param id
     * @since 1.13
     */
    protected RemovePatient(java.lang.Long id) {
      super(Clinic.this, "DELETE", REST_PATH, null, Void.class);
      this.id = com.google.api.client.util.Preconditions.checkNotNull(id, "Required parameter id must be specified.");
    }

    @Override
    public RemovePatient setAlt(java.lang.String alt) {
      return (RemovePatient) super.setAlt(alt);
    }

    @Override
    public RemovePatient setFields(java.lang.String fields) {
      return (RemovePatient) super.setFields(fields);
    }

    @Override
    public RemovePatient setKey(java.lang.String key) {
      return (RemovePatient) super.setKey(key);
    }

    @Override
    public RemovePatient setOauthToken(java.lang.String oauthToken) {
      return (RemovePatient) super.setOauthToken(oauthToken);
    }

    @Override
    public RemovePatient setPrettyPrint(java.lang.Boolean prettyPrint) {
      return (RemovePatient) super.setPrettyPrint(prettyPrint);
    }

    @Override
    public RemovePatient setQuotaUser(java.lang.String quotaUser) {
      return (RemovePatient) super.setQuotaUser(quotaUser);
    }

    @Override
    public RemovePatient setUserIp(java.lang.String userIp) {
      return (RemovePatient) super.setUserIp(userIp);
    }

    @com.google.api.client.util.Key
    private java.lang.Long id;

    /**

     */
    public java.lang.Long getId() {
      return id;
    }

    public RemovePatient setId(java.lang.Long id) {
      this.id = id;
      return this;
    }

    @Override
    public RemovePatient set(String parameterName, Object value) {
      return (RemovePatient) super.set(parameterName, value);
    }
  }

  /**
   * Create a request for the method "removeQueue".
   *
   * This request holds the parameters needed by the clinic server.  After setting any optional
   * parameters, call the {@link RemoveQueue#execute()} method to invoke the remote operation.
   *
   * @param id
   * @return the request
   */
  public RemoveQueue removeQueue(java.lang.Long id) throws java.io.IOException {
    RemoveQueue result = new RemoveQueue(id);
    initialize(result);
    return result;
  }

  public class RemoveQueue extends ClinicRequest<Void> {

    private static final String REST_PATH = "queue/{id}";

    /**
     * Create a request for the method "removeQueue".
     *
     * This request holds the parameters needed by the the clinic server.  After setting any optional
     * parameters, call the {@link RemoveQueue#execute()} method to invoke the remote operation. <p>
     * {@link
     * RemoveQueue#initialize(com.google.api.client.googleapis.services.AbstractGoogleClientRequest)}
     * must be called to initialize this instance immediately after invoking the constructor. </p>
     *
     * @param id
     * @since 1.13
     */
    protected RemoveQueue(java.lang.Long id) {
      super(Clinic.this, "DELETE", REST_PATH, null, Void.class);
      this.id = com.google.api.client.util.Preconditions.checkNotNull(id, "Required parameter id must be specified.");
    }

    @Override
    public RemoveQueue setAlt(java.lang.String alt) {
      return (RemoveQueue) super.setAlt(alt);
    }

    @Override
    public RemoveQueue setFields(java.lang.String fields) {
      return (RemoveQueue) super.setFields(fields);
    }

    @Override
    public RemoveQueue setKey(java.lang.String key) {
      return (RemoveQueue) super.setKey(key);
    }

    @Override
    public RemoveQueue setOauthToken(java.lang.String oauthToken) {
      return (RemoveQueue) super.setOauthToken(oauthToken);
    }

    @Override
    public RemoveQueue setPrettyPrint(java.lang.Boolean prettyPrint) {
      return (RemoveQueue) super.setPrettyPrint(prettyPrint);
    }

    @Override
    public RemoveQueue setQuotaUser(java.lang.String quotaUser) {
      return (RemoveQueue) super.setQuotaUser(quotaUser);
    }

    @Override
    public RemoveQueue setUserIp(java.lang.String userIp) {
      return (RemoveQueue) super.setUserIp(userIp);
    }

    @com.google.api.client.util.Key
    private java.lang.Long id;

    /**

     */
    public java.lang.Long getId() {
      return id;
    }

    public RemoveQueue setId(java.lang.Long id) {
      this.id = id;
      return this;
    }

    @Override
    public RemoveQueue set(String parameterName, Object value) {
      return (RemoveQueue) super.set(parameterName, value);
    }
  }

  /**
   * Create a request for the method "updateDoctor".
   *
   * This request holds the parameters needed by the clinic server.  After setting any optional
   * parameters, call the {@link UpdateDoctor#execute()} method to invoke the remote operation.
   *
   * @param content the {@link com.example.clinic.model.Doctor}
   * @return the request
   */
  public UpdateDoctor updateDoctor(com.example.clinic.model.Doctor content) throws java.io.IOException {
    UpdateDoctor result = new UpdateDoctor(content);
    initialize(result);
    return result;
  }

  public class UpdateDoctor extends ClinicRequest<com.example.clinic.model.Doctor> {

    private static final String REST_PATH = "doctor";

    /**
     * Create a request for the method "updateDoctor".
     *
     * This request holds the parameters needed by the the clinic server.  After setting any optional
     * parameters, call the {@link UpdateDoctor#execute()} method to invoke the remote operation. <p>
     * {@link
     * UpdateDoctor#initialize(com.google.api.client.googleapis.services.AbstractGoogleClientRequest)}
     * must be called to initialize this instance immediately after invoking the constructor. </p>
     *
     * @param content the {@link com.example.clinic.model.Doctor}
     * @since 1.13
     */
    protected UpdateDoctor(com.example.clinic.model.Doctor content) {
      super(Clinic.this, "PUT", REST_PATH, content, com.example.clinic.model.Doctor.class);
    }

    @Override
    public UpdateDoctor setAlt(java.lang.String alt) {
      return (UpdateDoctor) super.setAlt(alt);
    }

    @Override
    public UpdateDoctor setFields(java.lang.String fields) {
      return (UpdateDoctor) super.setFields(fields);
    }

    @Override
    public UpdateDoctor setKey(java.lang.String key) {
      return (UpdateDoctor) super.setKey(key);
    }

    @Override
    public UpdateDoctor setOauthToken(java.lang.String oauthToken) {
      return (UpdateDoctor) super.setOauthToken(oauthToken);
    }

    @Override
    public UpdateDoctor setPrettyPrint(java.lang.Boolean prettyPrint) {
      return (UpdateDoctor) super.setPrettyPrint(prettyPrint);
    }

    @Override
    public UpdateDoctor setQuotaUser(java.lang.String quotaUser) {
      return (UpdateDoctor) super.setQuotaUser(quotaUser);
    }

    @Override
    public UpdateDoctor setUserIp(java.lang.String userIp) {
      return (UpdateDoctor) super.setUserIp(userIp);
    }

    @Override
    public UpdateDoctor set(String parameterName, Object value) {
      return (UpdateDoctor) super.set(parameterName, value);
    }
  }

  /**
   * Create a request for the method "updatePatient".
   *
   * This request holds the parameters needed by the clinic server.  After setting any optional
   * parameters, call the {@link UpdatePatient#execute()} method to invoke the remote operation.
   *
   * @param content the {@link com.example.clinic.model.Patient}
   * @return the request
   */
  public UpdatePatient updatePatient(com.example.clinic.model.Patient content) throws java.io.IOException {
    UpdatePatient result = new UpdatePatient(content);
    initialize(result);
    return result;
  }

  public class UpdatePatient extends ClinicRequest<com.example.clinic.model.Patient> {

    private static final String REST_PATH = "patient";

    /**
     * Create a request for the method "updatePatient".
     *
     * This request holds the parameters needed by the the clinic server.  After setting any optional
     * parameters, call the {@link UpdatePatient#execute()} method to invoke the remote operation. <p>
     * {@link UpdatePatient#initialize(com.google.api.client.googleapis.services.AbstractGoogleClientR
     * equest)} must be called to initialize this instance immediately after invoking the constructor.
     * </p>
     *
     * @param content the {@link com.example.clinic.model.Patient}
     * @since 1.13
     */
    protected UpdatePatient(com.example.clinic.model.Patient content) {
      super(Clinic.this, "PUT", REST_PATH, content, com.example.clinic.model.Patient.class);
    }

    @Override
    public UpdatePatient setAlt(java.lang.String alt) {
      return (UpdatePatient) super.setAlt(alt);
    }

    @Override
    public UpdatePatient setFields(java.lang.String fields) {
      return (UpdatePatient) super.setFields(fields);
    }

    @Override
    public UpdatePatient setKey(java.lang.String key) {
      return (UpdatePatient) super.setKey(key);
    }

    @Override
    public UpdatePatient setOauthToken(java.lang.String oauthToken) {
      return (UpdatePatient) super.setOauthToken(oauthToken);
    }

    @Override
    public UpdatePatient setPrettyPrint(java.lang.Boolean prettyPrint) {
      return (UpdatePatient) super.setPrettyPrint(prettyPrint);
    }

    @Override
    public UpdatePatient setQuotaUser(java.lang.String quotaUser) {
      return (UpdatePatient) super.setQuotaUser(quotaUser);
    }

    @Override
    public UpdatePatient setUserIp(java.lang.String userIp) {
      return (UpdatePatient) super.setUserIp(userIp);
    }

    @Override
    public UpdatePatient set(String parameterName, Object value) {
      return (UpdatePatient) super.set(parameterName, value);
    }
  }

  /**
   * Create a request for the method "updateQueue".
   *
   * This request holds the parameters needed by the clinic server.  After setting any optional
   * parameters, call the {@link UpdateQueue#execute()} method to invoke the remote operation.
   *
   * @param content the {@link com.example.clinic.model.Queue}
   * @return the request
   */
  public UpdateQueue updateQueue(com.example.clinic.model.Queue content) throws java.io.IOException {
    UpdateQueue result = new UpdateQueue(content);
    initialize(result);
    return result;
  }

  public class UpdateQueue extends ClinicRequest<com.example.clinic.model.Queue> {

    private static final String REST_PATH = "queue";

    /**
     * Create a request for the method "updateQueue".
     *
     * This request holds the parameters needed by the the clinic server.  After setting any optional
     * parameters, call the {@link UpdateQueue#execute()} method to invoke the remote operation. <p>
     * {@link
     * UpdateQueue#initialize(com.google.api.client.googleapis.services.AbstractGoogleClientRequest)}
     * must be called to initialize this instance immediately after invoking the constructor. </p>
     *
     * @param content the {@link com.example.clinic.model.Queue}
     * @since 1.13
     */
    protected UpdateQueue(com.example.clinic.model.Queue content) {
      super(Clinic.this, "PUT", REST_PATH, content, com.example.clinic.model.Queue.class);
    }

    @Override
    public UpdateQueue setAlt(java.lang.String alt) {
      return (UpdateQueue) super.setAlt(alt);
    }

    @Override
    public UpdateQueue setFields(java.lang.String fields) {
      return (UpdateQueue) super.setFields(fields);
    }

    @Override
    public UpdateQueue setKey(java.lang.String key) {
      return (UpdateQueue) super.setKey(key);
    }

    @Override
    public UpdateQueue setOauthToken(java.lang.String oauthToken) {
      return (UpdateQueue) super.setOauthToken(oauthToken);
    }

    @Override
    public UpdateQueue setPrettyPrint(java.lang.Boolean prettyPrint) {
      return (UpdateQueue) super.setPrettyPrint(prettyPrint);
    }

    @Override
    public UpdateQueue setQuotaUser(java.lang.String quotaUser) {
      return (UpdateQueue) super.setQuotaUser(quotaUser);
    }

    @Override
    public UpdateQueue setUserIp(java.lang.String userIp) {
      return (UpdateQueue) super.setUserIp(userIp);
    }

    @Override
    public UpdateQueue set(String parameterName, Object value) {
      return (UpdateQueue) super.set(parameterName, value);
    }
  }

  /**
   * Builder for {@link Clinic}.
   *
   * <p>
   * Implementation is not thread-safe.
   * </p>
   *
   * @since 1.3.0
   */
  public static final class Builder extends com.google.api.client.googleapis.services.json.AbstractGoogleJsonClient.Builder {

    /**
     * Returns an instance of a new builder.
     *
     * @param transport HTTP transport, which should normally be:
     *        <ul>
     *        <li>Google App Engine:
     *        {@code com.google.api.client.extensions.appengine.http.UrlFetchTransport}</li>
     *        <li>Android: {@code newCompatibleTransport} from
     *        {@code com.google.api.client.extensions.android.http.AndroidHttp}</li>
     *        <li>Java: {@link com.google.api.client.googleapis.javanet.GoogleNetHttpTransport#newTrustedTransport()}
     *        </li>
     *        </ul>
     * @param jsonFactory JSON factory, which may be:
     *        <ul>
     *        <li>Jackson: {@code com.google.api.client.json.jackson2.JacksonFactory}</li>
     *        <li>Google GSON: {@code com.google.api.client.json.gson.GsonFactory}</li>
     *        <li>Android Honeycomb or higher:
     *        {@code com.google.api.client.extensions.android.json.AndroidJsonFactory}</li>
     *        </ul>
     * @param httpRequestInitializer HTTP request initializer or {@code null} for none
     * @since 1.7
     */
    public Builder(com.google.api.client.http.HttpTransport transport, com.google.api.client.json.JsonFactory jsonFactory,
        com.google.api.client.http.HttpRequestInitializer httpRequestInitializer) {
      super(
          transport,
          jsonFactory,
          DEFAULT_ROOT_URL,
          DEFAULT_SERVICE_PATH,
          httpRequestInitializer,
          false);
    }

    /** Builds a new instance of {@link Clinic}. */
    @Override
    public Clinic build() {
      return new Clinic(this);
    }

    @Override
    public Builder setRootUrl(String rootUrl) {
      return (Builder) super.setRootUrl(rootUrl);
    }

    @Override
    public Builder setServicePath(String servicePath) {
      return (Builder) super.setServicePath(servicePath);
    }

    @Override
    public Builder setHttpRequestInitializer(com.google.api.client.http.HttpRequestInitializer httpRequestInitializer) {
      return (Builder) super.setHttpRequestInitializer(httpRequestInitializer);
    }

    @Override
    public Builder setApplicationName(String applicationName) {
      return (Builder) super.setApplicationName(applicationName);
    }

    @Override
    public Builder setSuppressPatternChecks(boolean suppressPatternChecks) {
      return (Builder) super.setSuppressPatternChecks(suppressPatternChecks);
    }

    @Override
    public Builder setSuppressRequiredParameterChecks(boolean suppressRequiredParameterChecks) {
      return (Builder) super.setSuppressRequiredParameterChecks(suppressRequiredParameterChecks);
    }

    @Override
    public Builder setSuppressAllChecks(boolean suppressAllChecks) {
      return (Builder) super.setSuppressAllChecks(suppressAllChecks);
    }

    /**
     * Set the {@link ClinicRequestInitializer}.
     *
     * @since 1.12
     */
    public Builder setClinicRequestInitializer(
        ClinicRequestInitializer clinicRequestInitializer) {
      return (Builder) super.setGoogleClientRequestInitializer(clinicRequestInitializer);
    }

    @Override
    public Builder setGoogleClientRequestInitializer(
        com.google.api.client.googleapis.services.GoogleClientRequestInitializer googleClientRequestInitializer) {
      return (Builder) super.setGoogleClientRequestInitializer(googleClientRequestInitializer);
    }
  }
}
